{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MAN13\\\\Downloads\\\\friibee\\\\friibee-compile\\\\SwipeFunction\\\\src\\\\RoundButton\\\\index.js\";\nimport React, { useCallback, useRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { FontAwesome } from '@expo/vector-icons';\nimport { styles } from \"./styles\";\nexport default function RoundButton(_ref) {\n  var name = _ref.name,\n      size = _ref.size,\n      color = _ref.color,\n      onPress = _ref.onPress;\n  var scale = useRef(new Animated.Value(1)).current;\n  var animateScale = useCallback(function (newValue) {\n    Animated.spring(scale, {\n      toValue: newValue,\n      friction: 4,\n      useNativeDriver: true\n    }).start();\n  }, [scale]);\n  return React.createElement(TouchableWithoutFeedback, {\n    onPressIn: function onPressIn() {\n      return animateScale(0.8);\n    },\n    delayPressIn: 0,\n    onPressOut: function onPressOut() {\n      animateScale(1);\n      onPress();\n    },\n    delayPressOut: 110,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, React.createElement(Animated.View, {\n    style: [styles.container, {\n      transform: [{\n        scale: scale\n      }]\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, React.createElement(FontAwesome, {\n    name: name,\n    size: size,\n    color: color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/MAN13/Downloads/friibee/friibee-compile/SwipeFunction/src/RoundButton/index.js"],"names":["React","useCallback","useRef","FontAwesome","styles","RoundButton","name","size","color","onPress","scale","Animated","Value","current","animateScale","newValue","spring","toValue","friction","useNativeDriver","start","container","transform"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,MAA7B,QAA2C,OAA3C;;;AAEA,SAASC,WAAT,QAA4B,oBAA5B;AAEA,SAASC,MAAT;AAEA,eAAe,SAASC,WAAT,OAAqD;AAAA,MAA9BC,IAA8B,QAA9BA,IAA8B;AAAA,MAAxBC,IAAwB,QAAxBA,IAAwB;AAAA,MAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,MAAXC,OAAW,QAAXA,OAAW;AAClE,MAAMC,KAAK,GAAGR,MAAM,CAAC,IAAIS,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BC,OAA5C;AAEA,MAAMC,YAAY,GAAGb,WAAW,CAC9B,UAACc,QAAD,EAAc;AACZJ,IAAAA,QAAQ,CAACK,MAAT,CAAgBN,KAAhB,EAAuB;AACrBO,MAAAA,OAAO,EAAEF,QADY;AAErBG,MAAAA,QAAQ,EAAE,CAFW;AAGrBC,MAAAA,eAAe,EAAE;AAHI,KAAvB,EAIGC,KAJH;AAKD,GAP6B,EAQ9B,CAACV,KAAD,CAR8B,CAAhC;AAWA,SACE,oBAAC,wBAAD;AACE,IAAA,SAAS,EAAE;AAAA,aAAMI,YAAY,CAAC,GAAD,CAAlB;AAAA,KADb;AAEE,IAAA,YAAY,EAAE,CAFhB;AAGE,IAAA,UAAU,EAAE,sBAAM;AAChBA,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAL,MAAAA,OAAO;AACR,KANH;AAOE,IAAA,aAAa,EAAE,GAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAE,CAACL,MAAM,CAACiB,SAAR,EAAmB;AAAEC,MAAAA,SAAS,EAAE,CAAC;AAAEZ,QAAAA,KAAK,EAALA;AAAF,OAAD;AAAb,KAAnB,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAEJ,IAAnB;AAAyB,IAAA,IAAI,EAAEC,IAA/B;AAAqC,IAAA,KAAK,EAAEC,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATF,CADF;AAeD","sourcesContent":["import React, { useCallback, useRef } from 'react';\r\nimport { Animated, TouchableWithoutFeedback } from 'react-native';\r\nimport { FontAwesome } from '@expo/vector-icons';\r\n\r\nimport { styles } from './styles';\r\n\r\nexport default function RoundButton({ name, size, color, onPress }) {\r\n  const scale = useRef(new Animated.Value(1)).current;\r\n\r\n  const animateScale = useCallback(\r\n    (newValue) => {\r\n      Animated.spring(scale, {\r\n        toValue: newValue,\r\n        friction: 4,\r\n        useNativeDriver: true,\r\n      }).start();\r\n    },\r\n    [scale]\r\n  );\r\n\r\n  return (\r\n    <TouchableWithoutFeedback\r\n      onPressIn={() => animateScale(0.8)}\r\n      delayPressIn={0}\r\n      onPressOut={() => {\r\n        animateScale(1);\r\n        onPress();\r\n      }}\r\n      delayPressOut={110}\r\n    >\r\n      <Animated.View style={[styles.container, { transform: [{ scale }] }]}>\r\n        <FontAwesome name={name} size={size} color={color} />\r\n      </Animated.View>\r\n    </TouchableWithoutFeedback>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}