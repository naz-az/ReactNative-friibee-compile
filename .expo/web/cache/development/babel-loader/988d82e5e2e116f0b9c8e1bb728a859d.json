{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\MAN13\\\\Downloads\\\\friibee\\\\friibee-compile\\\\SwipeFunction\\\\src\\\\Main\\\\index.js\";\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Card from \"../Card\";\nimport Footer from \"../Footer\";\nimport { ACTION_OFFSET, CARD } from \"../utils/constants\";\nimport { pets as petsArray } from \"./data\";\nimport { styles } from \"./styles\";\nexport default function Main() {\n  var _this = this;\n\n  var _useState = useState(petsArray),\n      _useState2 = _slicedToArray(_useState, 2),\n      pets = _useState2[0],\n      setPets = _useState2[1];\n\n  var swipe = useRef(new Animated.ValueXY()).current;\n  var tiltSign = useRef(new Animated.Value(1)).current;\n  useEffect(function () {\n    if (!pets.length) {\n      setPets(petsArray);\n    }\n  }, [pets.length]);\n  var panResponder = PanResponder.create({\n    onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {\n      return true;\n    },\n    onPanResponderMove: function onPanResponderMove(_, _ref) {\n      var dx = _ref.dx,\n          dy = _ref.dy,\n          y0 = _ref.y0;\n      swipe.setValue({\n        x: dx,\n        y: dy\n      });\n      tiltSign.setValue(y0 > CARD.HEIGHT / 2 ? 1 : -1);\n    },\n    onPanResponderRelease: function onPanResponderRelease(_, _ref2) {\n      var dx = _ref2.dx,\n          dy = _ref2.dy;\n      var direction = Math.sign(dx);\n      var isActionActive = Math.abs(dx) > ACTION_OFFSET;\n\n      if (isActionActive) {\n        Animated.timing(swipe, {\n          duration: 200,\n          toValue: {\n            x: direction * CARD.OUT_OF_SCREEN,\n            y: dy\n          },\n          useNativeDriver: true\n        }).start(removeTopCard);\n      } else {\n        Animated.spring(swipe, {\n          toValue: {\n            x: 0,\n            y: 0\n          },\n          useNativeDriver: true,\n          friction: 5\n        }).start();\n      }\n    }\n  });\n  var removeTopCard = useCallback(function () {\n    setPets(function (prevState) {\n      return prevState.slice(1);\n    });\n    swipe.setValue({\n      x: 0,\n      y: 0\n    });\n  }, [swipe]);\n  var handleChoice = useCallback(function (direction) {\n    Animated.timing(swipe.x, {\n      toValue: direction * CARD.OUT_OF_SCREEN,\n      duration: 400,\n      useNativeDriver: true\n    }).start(removeTopCard);\n  }, [removeTopCard, swipe.x]);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, pets.map(function (_ref3, index) {\n    var name = _ref3.name,\n        source = _ref3.source;\n    var isFirst = index === 0;\n    var dragHandlers = isFirst ? panResponder.panHandlers : {};\n    return React.createElement(Card, _extends({\n      key: name,\n      name: name,\n      source: source,\n      isFirst: isFirst,\n      swipe: swipe,\n      tiltSign: tiltSign\n    }, dragHandlers, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }));\n  }).reverse(), React.createElement(Footer, {\n    handleChoice: handleChoice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/MAN13/Downloads/friibee/friibee-compile/SwipeFunction/src/Main/index.js"],"names":["React","useCallback","useEffect","useRef","useState","Card","Footer","ACTION_OFFSET","CARD","pets","petsArray","styles","Main","setPets","swipe","Animated","ValueXY","current","tiltSign","Value","length","panResponder","PanResponder","create","onMoveShouldSetPanResponder","onPanResponderMove","_","dx","dy","y0","setValue","x","y","HEIGHT","onPanResponderRelease","direction","Math","sign","isActionActive","abs","timing","duration","toValue","OUT_OF_SCREEN","useNativeDriver","start","removeTopCard","spring","friction","prevState","slice","handleChoice","container","map","index","name","source","isFirst","dragHandlers","panHandlers","reverse"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Animated, PanResponder, View } from 'react-native';\r\n\r\nimport Card from '../Card';\r\nimport Footer from '../Footer';\r\nimport { ACTION_OFFSET, CARD } from '../utils/constants';\r\nimport { pets as petsArray } from './data';\r\nimport { styles } from './styles';\r\n\r\nexport default function Main() {\r\n  const [pets, setPets] = useState(petsArray);\r\n  const swipe = useRef(new Animated.ValueXY()).current;\r\n  const tiltSign = useRef(new Animated.Value(1)).current;\r\n\r\n  useEffect(() => {\r\n    if (!pets.length) {\r\n      setPets(petsArray);\r\n    }\r\n  }, [pets.length]);\r\n\r\n  const panResponder = PanResponder.create({\r\n    onMoveShouldSetPanResponder: () => true,\r\n    onPanResponderMove: (_, { dx, dy, y0 }) => {\r\n      swipe.setValue({ x: dx, y: dy });\r\n      tiltSign.setValue(y0 > CARD.HEIGHT / 2 ? 1 : -1);\r\n    },\r\n    onPanResponderRelease: (_, { dx, dy }) => {\r\n      const direction = Math.sign(dx);\r\n      const isActionActive = Math.abs(dx) > ACTION_OFFSET;\r\n\r\n      if (isActionActive) {\r\n        Animated.timing(swipe, {\r\n          duration: 200,\r\n          toValue: {\r\n            x: direction * CARD.OUT_OF_SCREEN,\r\n            y: dy,\r\n          },\r\n          useNativeDriver: true,\r\n        }).start(removeTopCard);\r\n      } else {\r\n        Animated.spring(swipe, {\r\n          toValue: {\r\n            x: 0,\r\n            y: 0,\r\n          },\r\n          useNativeDriver: true,\r\n          friction: 5,\r\n        }).start();\r\n      }\r\n    },\r\n  });\r\n\r\n  const removeTopCard = useCallback(() => {\r\n    setPets((prevState) => prevState.slice(1));\r\n    swipe.setValue({ x: 0, y: 0 });\r\n  }, [swipe]);\r\n\r\n  const handleChoice = useCallback(\r\n    (direction) => {\r\n      Animated.timing(swipe.x, {\r\n        toValue: direction * CARD.OUT_OF_SCREEN,\r\n        duration: 400,\r\n        useNativeDriver: true,\r\n      }).start(removeTopCard);\r\n    },\r\n    [removeTopCard, swipe.x]\r\n  );\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      \r\n      {pets\r\n        .map(({ name, source }, index) => {\r\n          const isFirst = index === 0;\r\n          const dragHandlers = isFirst ? panResponder.panHandlers : {};\r\n\r\n          return (\r\n            <Card\r\n              key={name}\r\n              name={name}\r\n              source={source}\r\n              isFirst={isFirst}\r\n              swipe={swipe}\r\n              tiltSign={tiltSign}\r\n              {...dragHandlers}\r\n            />\r\n          );\r\n        })\r\n        .reverse()}\r\n\r\n      <Footer handleChoice={handleChoice} />\r\n    </View>\r\n    \r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}